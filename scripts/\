import wave_timing.utils as wtu
import wave_timing.calc as wtc
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


start_date = '2021-01-19'
end_date = '2021-01-20'
taps = 601
cutoff = [100, 900]

data = wtu.get_data(start_date, end_date)
dV1, dV2, dV3, dV4, __ = data.get_vac_data()
time = dV1.index.to_numpy()
vac_sample_rt, __, dt = wtc.sample_rate(time)
mag_data = data.get_mag_data()
sw_data = data.get_sw_data()
filters = wtu.FIRBandPass(taps, cutoff, vac_sample_rt)

B_vec_data = mag_data[['Bx', 'By', 'Bz']]
B_mag_data = mag_data['|B|']
B_date = mag_data.index

V_vec_data = sw_data[['Vx', 'Vy', 'Vz']]
V_mag_data = sw_data['|V|']
V_date = sw_data.index

for date in dV1.columns:
    dv1 = dV1[date].to_numpy()
    d_dv1 = wtc.derivitive(dv1, time)
    dv2 = dV2[date].to_numpy()
    d_dv2 = wtc.derivitive(dv2, time)
    dv3 = dV3[date].to_numpy()
    d_dv3 = wtc.derivitive(dv3, time)
    dv4 = dV4[date].to_numpy()
    d_dv4 = wtc.derivitive(dv4, time)

    dv1 = filters.filter(dv1)
    d_dv1 = filters.filter(d_dv1)
    dv2 = filters.filter(dv2)
    d_dv2 = filters.filter(d_dv2)
    dv3 = filters.filter(dv3)
    d_dv3 = filters.filter(d_dv3)
    dv4 = filters.filter(dv4)
    d_dv4 = filters.filter(d_dv4)

    B_index = wtc.find_nearest(B_date, date)
    V_index = wtc.find_nearest(V_date, date)

    B_vec = B_vec_data.iloc[B_index]
    B_mag = B_mag_data.iloc[B_index]

    V_vec = V_vec_data.iloc[V_index]
    V_mag = V_mag_data.iloc[V_index]

    single_freq_times = wtu.frequency_filter(dv1, dv2, dv3, dv4, time) * dt
    delays = wtc.multiple_delay(dv1, dv2, dv3, dv4, time)

    v12_delay_peaks = []
    v34_delay_peaks = []
    v12_delay_peaks_pos = []
    v34_delay_peaks_pos = []
    v12_delay_troughs = []
    v34_delay_troughs = []
    v12_delay_troughs_pos = []
    v34_delay_troughs_pos = []

    for start, end in single_freq_times:
        d_peaks, d_peaks_pos, d_troughs, d_troughs_pos = delays.calculate_delays(start=start, end=end)
        v12_delay_peaks.extend(d_peaks[0])
        v34_delay_peaks.extend(d_peaks[1])
        v12_delay_peaks_pos.extend(d_peaks_pos[0])
        v34_delay_peaks_pos.extend(d_peaks_pos[1])
        v12_delay_troughs.extend(d_troughs[0])
        v34_delay_troughs.extend(d_troughs[1])
        v12_delay_troughs_pos.extend(d_troughs_pos[0])
        v34_delay_troughs_pos.extend(d_troughs_pos[1])

    v12_delay_peaks = np.array(v12_delay_peaks)
    v34_delay_peaks = np.array(v34_delay_peaks)
    v12_delay_peaks_pos = np.array(v12_delay_peaks_pos)
    v34_delay_peaks_pos = np.array(v34_delay_peaks_pos)
    v12_delay_troughs = np.array(v12_delay_troughs)
    v34_delay_troughs = np.array(v34_delay_troughs)
    v12_delay_troughs_pos = np.array(v12_delay_troughs_pos)
    v34_delay_troughs_pos = np.array(v34_delay_troughs_pos)

    wave_vel_peaks = wtc.wave_velocity(v12_delay_peaks, v34_delay_peaks)[0]
    wave_vel_troughs = wtc.wave_velocity(v12_delay_troughs, v34_delay_troughs)[0]

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(v12_delay_peaks_pos, wave_vel_peaks, 'k.')
    ax.axhline(np.mean(wave_vel_peaks), c='k')
    ax.plot(v34_delay_troughs_pos, wave_vel_troughs, 'r.')
    ax.axhline(np.mean(wave_vel_troughs), c='r')
    plt.show()

    # Ignore Zero Cossings for now
    #d_single_frequency_times = wtu.frequency_filter(d_dv1, d_dv2, d_dv3, d_dv4, time) * dt
    #d_delays = wtc.multiple_delay(d_dv1, d_dv2, d_dv3, d_dv4, time)

    #d_v12_delay_peaks = []
    #d_v34_delay_peaks = []
    #d_v12_delay_peaks_pos = []
    #d_v34_delay_peaks_pos = []
    #d_v12_delay_troughs = []
    #d_v34_delay_troughs = []
    #d_v12_delay_troughs_pos = []
    #d_v34_delay_troughs_pos = []

    #for start, end in d_single_frequency_times:
    #    d_peaks, d_peaks_pos, d_troughs, d_troughs_pos = d_delays.calculate_delays(start=start, end=end)
    #    d_v12_delay_peaks.extend(d_peaks[0])
    #    d_v34_delay_peaks.extend(d_peaks[1])
    #    d_v12_delay_peaks_pos.extend(d_peaks_pos[0])
    #    d_v34_delay_peaks_pos.extend(d_peaks_pos[1])
    #    d_v12_delay_troughs.extend(d_troughs[0])
    #    d_v34_delay_troughs.extend(d_troughs[1])
    #    d_v12_delay_troughs_pos.extend(d_troughs_pos[0])
    #    d_v34_delay_troughs_pos.extend(d_troughs_pos[1])

    #d_v12_delay_peaks = np.array(d_v12_delay_peaks)
    #d_v34_delay_peaks = np.array(d_v34_delay_peaks)
    #d_v12_delay_peaks_pos = np.array(d_v12_delay_peaks_pos)
    #d_v34_delay_peaks_pos = np.array(d_v34_delay_peaks_pos)
    #d_v12_delay_troughs = np.array(d_v12_delay_troughs)
    #d_v34_delay_troughs = np.array(d_v34_delay_troughs)
    #d_v12_delay_troughs_pos = np.array(d_v12_delay_troughs_pos)
    #d_v34_delay_troughs_pos = np.array(d_v34_delay_troughs_pos)


    fig, ax = plt.subplots(2, sharex=True, figsize=(10, 5))
    ax[0].plot(time, wtu.wave_normalization(dv1), 'r')
    ax[0].plot(time, wtu.wave_normalization(d_dv1), 'darkred')
    ax[0].plot(time, wtu.wave_normalization(dv2), 'g')
    ax[0].plot(time, wtu.wave_normalization(d_dv2), 'darkgreen')
    ax[0].plot(v12_delay_peaks_pos, v12_delay_peaks, 'k.')
    ax[0].plot(v12_delay_troughs_pos, v12_delay_troughs, 'k.')

    ax[1].plot(time, wtu.wave_normalization(dv3), 'r')
    ax[1].plot(time, wtu.wave_normalization(d_dv3), 'darkred')
    ax[1].plot(time, wtu.wave_normalization(dv4), 'g')
    ax[1].plot(time, wtu.wave_normalization(d_dv4), 'darkgreen')
    ax[1].plot(v34_delay_peaks_pos, v34_delay_peaks, 'k.')
    ax[1].plot(v34_delay_troughs_pos, v34_delay_troughs, 'k.')
    plt.show()
